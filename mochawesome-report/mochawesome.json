{
  "stats": {
    "suites": 3,
    "tests": 7,
    "passes": 7,
    "pending": 0,
    "failures": 0,
    "start": "2025-07-23T12:20:46.620Z",
    "end": "2025-07-23T12:20:46.656Z",
    "duration": 36,
    "testsRegistered": 7,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "7a2c9852-1a96-4cea-808d-66bca5b20165",
      "title": "",
      "fullFile": "/home/lucastiago/Documentos/Projetos/Mentoria2.0/desafioAPI/desafio_03.1.2/test/login.test.js",
      "file": "/test/login.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0dd9599c-2160-4245-bdb5-1e9fc928a045",
          "title": " [login] Login",
          "fullFile": "/home/lucastiago/Documentos/Projetos/Mentoria2.0/desafioAPI/desafio_03.1.2/test/login.test.js",
          "file": "/test/login.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8de39264-11cb-4945-8b12-f284d777ab25",
              "title": " POST/auth/login",
              "fullFile": "/home/lucastiago/Documentos/Projetos/Mentoria2.0/desafioAPI/desafio_03.1.2/test/login.test.js",
              "file": "/test/login.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Deve retornar status 200 e mensagem \"Login realizado com sucesso\" quando usar credenciais válidas ",
                  "fullTitle": " [login] Login  POST/auth/login  Deve retornar status 200 e mensagem \"Login realizado com sucesso\" quando usar credenciais válidas ",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(process.env.BASE_URL)\n  .post(\"/auth/login\")\n  .set(\"Content-Type\", \"application/json\")\n  .send({\n      username: \"usuario1\",\n      password: \"senha123\",\n  })\nexpect(resposta.status).to.equal(200);\nexpect(resposta.body.mensagem).to.equal(\"Login realizado com sucesso!\");",
                  "err": {},
                  "uuid": "b419bf97-2514-449a-a977-5e09a140679d",
                  "parentUUID": "8de39264-11cb-4945-8b12-f284d777ab25",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": " Deve retornar status 404 e mensagem \"Usuário não cadastrado.\" quando usar credenciais não cadastradas",
                  "fullTitle": " [login] Login  POST/auth/login  Deve retornar status 404 e mensagem \"Usuário não cadastrado.\" quando usar credenciais não cadastradas",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const login404 = {\n    username: faker.internet.username(), \n    password: faker.internet.password(), \n}\n      const resposta = await request(process.env.BASE_URL)\n.post(\"/auth/login\")\n.set(\"Content-Type\", \"application/json\")\n.send(login404);\nexpect(resposta.status).to.equal(404);\nexpect(resposta.body.mensagem).to.equal(\"Usuário não cadastrado.\");",
                  "err": {},
                  "uuid": "e9f7963e-6722-4b34-b10a-16fe08030453",
                  "parentUUID": "8de39264-11cb-4945-8b12-f284d777ab25",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "  Deve retornar status 401 e mensagem \"Credenciais inválidas.\" quando usar credenciais inválidas",
                  "fullTitle": " [login] Login  POST/auth/login   Deve retornar status 401 e mensagem \"Credenciais inválidas.\" quando usar credenciais inválidas",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(process.env.BASE_URL)\n  .post(\"/auth/login\")\n  .set(\"Content-Type\", \"application/json\")\n  .send({\n    username: \"usuario1\",\n    password: \"senha-invalida\",\n  });\nexpect(resposta.status).to.equal(401);\nexpect(resposta.body.mensagem).to.equal(\"Credenciais inválidas.\");",
                  "err": {},
                  "uuid": "a6ec2e02-61bc-4487-bd6c-139e6e700482",
                  "parentUUID": "8de39264-11cb-4945-8b12-f284d777ab25",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": " Deve retornar status 401 e mensagem \"Usuário bloqueado por excesso de tentativas.\" quando usar credenciais inválidas por 3 tentativas",
                  "fullTitle": " [login] Login  POST/auth/login  Deve retornar status 401 e mensagem \"Usuário bloqueado por excesso de tentativas.\" quando usar credenciais inválidas por 3 tentativas",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(process.env.BASE_URL)\n  .post(\"/auth/login\")\n  .set(\"Content-Type\", \"application/json\")\n  .send({\n    username: \"usuario1\",\n    password: \"senha-invalida\",\n  });\nawait request(process.env.BASE_URL)\n  .post(\"/auth/login\")\n  .set(\"Content-Type\", \"application/json\")\n  .send({\n    username: \"usuario1\",\n    password: \"senha-invalida\",\n  });\nconst resposta = await request(process.env.BASE_URL)\n  .post(\"/auth/login\")\n  .set(\"Content-Type\", \"application/json\")\n  .send({\n    username: \"usuario1\",\n    password: \"senha-invalida\",\n  });\nexpect(resposta.status).to.equal(401);\nexpect(resposta.body.mensagem).to.equal(\n  \"Usuário bloqueado por excesso de tentativas.\"\n);",
                  "err": {},
                  "uuid": "8f516927-8cb3-4a2d-aae7-712f7e1260cd",
                  "parentUUID": "8de39264-11cb-4945-8b12-f284d777ab25",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": " Deve retornar status 400 e mensagem \"Usuário e senha são obrigatórios.\" quando não preencher campo password",
                  "fullTitle": " [login] Login  POST/auth/login  Deve retornar status 400 e mensagem \"Usuário e senha são obrigatórios.\" quando não preencher campo password",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(process.env.BASE_URL)\n  .post(\"/auth/login\")\n  .set(\"Content-Type\", \"application/json\")\n  .send({\n    username: faker.internet.username(),\n    password: \"\",\n  });\nexpect(resposta.status).to.equal(400);\nexpect(resposta.body.mensagem).to.equal(\n  \"Usuário e senha são obrigatórios.\"\n);",
                  "err": {},
                  "uuid": "c1b7d960-4c8a-4893-a678-dd1752cf7571",
                  "parentUUID": "8de39264-11cb-4945-8b12-f284d777ab25",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b419bf97-2514-449a-a977-5e09a140679d",
                "e9f7963e-6722-4b34-b10a-16fe08030453",
                "a6ec2e02-61bc-4487-bd6c-139e6e700482",
                "8f516927-8cb3-4a2d-aae7-712f7e1260cd",
                "c1b7d960-4c8a-4893-a678-dd1752cf7571"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 28,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "bbff16c5-33fc-40d5-9db8-dde7d9a1f7f7",
              "title": "[forgot] POST/auth/forgot-password",
              "fullFile": "/home/lucastiago/Documentos/Projetos/Mentoria2.0/desafioAPI/desafio_03.1.2/test/login.test.js",
              "file": "/test/login.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar status 200 quando o lembrete de senha for enviado com sucesso",
                  "fullTitle": " [login] Login [forgot] POST/auth/forgot-password Deve retornar status 200 quando o lembrete de senha for enviado com sucesso",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(process.env.BASE_URL)\n  .post(\"/auth/forgot-password\")\n  .set(\"Content-Type\", \"application/json\")\n  .send({\n    username: \"usuario1\",\n  });\nexpect(resposta.status).to.equal(200);\nexpect(resposta.body.lembrete).to.equal(\n  \"Seu lembrete de senha foi encaminhado para o email cadastrado: *******@email.com\"\n);",
                  "err": {},
                  "uuid": "0b59b077-ef06-4599-b054-43b3f8ac607e",
                  "parentUUID": "bbff16c5-33fc-40d5-9db8-dde7d9a1f7f7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar status 404 quando o usuário não estiver cadastrado",
                  "fullTitle": " [login] Login [forgot] POST/auth/forgot-password Deve retornar status 404 quando o usuário não estiver cadastrado",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userNotFound = {\n    username: faker.internet.username()\n}\n  const resposta = await request(process.env.BASE_URL)\n    .post(\"/auth/forgot-password\")\n    .set(\"Content-Type\", \"application/json\")\n    .send(userNotFound)\n  expect(resposta.status).to.equal(404);\n  expect(resposta.body.mensagem).to.equal(\"Usuário não cadastrado.\");",
                  "err": {},
                  "uuid": "64581335-6fa5-4c35-83bc-143e49f706ab",
                  "parentUUID": "bbff16c5-33fc-40d5-9db8-dde7d9a1f7f7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0b59b077-ef06-4599-b054-43b3f8ac607e",
                "64581335-6fa5-4c35-83bc-143e49f706ab"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}